{"version":3,"file":"static/js/15.fa951188.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm.jsx","components/Filter.jsx","components/ContactList.jsx","components/Info.jsx","pages/Contacts.jsx"],"sourcesContent":["// Import createSelector function from '@reduxjs/toolkit' for creating memoized selectors\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n\n  (contacts, filter) => {\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n        contact.number.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact, updateContact } from '../redux/contacts/operations';\nimport { selectContacts } from '../redux/contacts/selectors';\nimport {\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Input,\n} from '@nextui-org/react';\n\nconst Form = ({ isOpen, onOpenChange, editingContact }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    if (editingContact) {\n      setName(editingContact.name);\n      setNumber(editingContact.number);\n    } else {\n      setName('');\n      setNumber('');\n      setMessage('');\n    }\n  }, [editingContact]);\n\n  const validatePhone = phone => phone.match(/^[0-9+\\-() ]*$/);\n\n  const isInvalid = useMemo(() => {\n    if (number === '') return false;\n\n    return validatePhone(number) ? false : true;\n  }, [number]);\n\n  const handleSubmit = event => {\n    const filteredContacts = contacts.filter(\n      contact => !editingContact || contact.id !== editingContact.id\n    );\n\n    const existingContact = filteredContacts.find(\n      contact => contact.name === name || contact.number === number\n    );\n\n    if (!existingContact && !isInvalid) {\n      if (editingContact) {\n        dispatch(\n          updateContact({\n            contactId: editingContact.id,\n            updatedData: {\n              name,\n              number,\n            },\n          })\n        );\n      } else {\n        dispatch(addContact({ name, number }));\n      }\n      setName('');\n      setNumber('');\n      setMessage('');\n      onOpenChange(false);\n    } else {\n      if (\n        existingContact &&\n        existingContact.name === name &&\n        existingContact.number === number\n      ) {\n        setMessage(\n          `Contact with name ${name} and phone ${number} already exists!`\n        );\n      } else if (existingContact && existingContact.name === name) {\n        setMessage(`Contact with name ${name} already exists!`);\n      } else if (existingContact && existingContact.number === number) {\n        setMessage(`Contact with phone ${number} already exists!`);\n      }\n    }\n  };\n\n  const closeModal = () => {\n    onOpenChange(false);\n\n    if (editingContact) {\n      setName(editingContact.name);\n      setNumber(editingContact.number);\n    } else {\n      setName('');\n      setNumber('');\n    }\n    setMessage('');\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onOpenChange={onOpenChange}\n      placement=\"top-center\"\n      hideCloseButton\n    >\n      <ModalContent>\n        <form onSubmit={handleSubmit} className=\"flex flex-col gap-4\">\n          <ModalHeader className=\"flex flex-col gap-1\">\n            {editingContact !== null ? 'Edit Contact' : 'Add Contact'}\n          </ModalHeader>\n          <ModalBody>\n            <Input\n              type=\"text\"\n              label=\"Name\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n              variant=\"bordered\"\n              isRequired\n              size=\"sm\"\n            />\n            <Input\n              type=\"tel\"\n              label=\"Phone\"\n              value={number}\n              onChange={e => setNumber(e.target.value)}\n              variant=\"bordered\"\n              isRequired\n              isInvalid={isInvalid}\n              errorMessage={isInvalid && 'Please enter a valid phone number'}\n              color={isInvalid && 'danger'}\n              size=\"sm\"\n            />\n            {message && <div className=\"text-sm text-danger\">{message}</div>}\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"danger\" variant=\"flat\" onClick={closeModal}>\n              Close\n            </Button>\n            <Button type=\"submit\" color=\"primary\">\n              {editingContact !== null ? 'Save' : 'Add Contact'}\n            </Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nForm.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onOpenChange: PropTypes.func.isRequired,\n  editingContact: PropTypes.object,\n};\n\nexport default Form;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../redux/contacts/filterSlice';\nimport { selectFilter } from '../redux/contacts/selectors';\nimport { Input } from '@nextui-org/react';\nimport { Search } from 'lucide-react';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <Input\n      type=\"text\"\n      placeholder=\"Search contacts\"\n      value={filter}\n      onChange={handleChange}\n      labelPlacement=\"outside\"\n      startContent={\n        <Search className=\"text-2xl text-default-400 pointer-events-none flex-shrink-0\" />\n      }\n    />\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact, fetchContacts } from '../redux/contacts/operations';\nimport {\n  selectVisibleContacts,\n  selectIsLoading,\n  selectError,\n} from '../redux/contacts/selectors';\nimport {\n  Table,\n  TableHeader,\n  TableColumn,\n  TableBody,\n  TableRow,\n  TableCell,\n  Spinner,\n  Button,\n} from '@nextui-org/react';\nimport { Trash2Icon, PencilIcon } from 'lucide-react';\n\nconst ContactList = ({ onOpen, onEditContact }) => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const sortedContacts = items\n    .slice()\n    .sort((a, b) => a.name.localeCompare(b.name));\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <Table\n      aria-label=\"Contacts\"\n      selectionMode=\"single\"\n      defaultSelectedKeys={['2']}\n      isHeaderSticky\n      classNames={{\n        base: 'max-h-[480px] overflow-scroll',\n      }}\n    >\n      <TableHeader>\n        <TableColumn className=\"w-2/5\">NAME</TableColumn>\n        <TableColumn className=\"w-2/5\">PHONE</TableColumn>\n        <TableColumn className=\"w-1/5 text-center\">ACTIONS</TableColumn>\n      </TableHeader>\n      <TableBody emptyContent={'No contacts to display.'}>\n        {isLoading && !error && (\n          <TableRow>\n            <TableCell aria-colspan={3} colSpan={3} className=\"text-center\">\n              <Spinner />\n            </TableCell>\n            <TableCell className=\"hidden\"></TableCell>\n            <TableCell className=\"hidden\"></TableCell>\n          </TableRow>\n        )}\n        {error && (\n          <TableRow>\n            <TableCell\n              aria-colspan={3}\n              colSpan={3}\n              className=\"text-center text-danger\"\n            >\n              {error}\n            </TableCell>\n            <TableCell className=\"hidden\"></TableCell>\n            <TableCell className=\"hidden\"></TableCell>\n          </TableRow>\n        )}\n\n        {!isLoading &&\n          sortedContacts.map(contact => (\n            <TableRow key={contact.id}>\n              <TableCell>{contact.name}</TableCell>\n              <TableCell>{contact.number}</TableCell>\n              <TableCell className=\"flex gap-1 items-center\">\n                <Button\n                  color=\"default\"\n                  variant=\"light\"\n                  size=\"sm\"\n                  onClick={() => onEditContact(contact)}\n                  onOpen={onOpen}\n                  isIconOnly\n                  startContent={<PencilIcon className=\"w-4 h-4\" />}\n                />\n                <Button\n                  color=\"danger\"\n                  variant=\"light\"\n                  size=\"sm\"\n                  onClick={() => handleDelete(contact.id)}\n                  isIconOnly\n                  startContent={<Trash2Icon className=\"w-4 h-4\" />}\n                />\n              </TableCell>\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nContactList.propTypes = {\n  onOpen: PropTypes.func.isRequired,\n  onEditContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useAuth } from 'hooks';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../redux/contacts/selectors';\nimport { User } from '@nextui-org/react';\n\nconst Info = () => {\n  const { user } = useAuth();\n\n  const items = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <h2 className=\"text-xl font-bold leading-tight tracking-tight md:text-3xl\">\n        Welcome, {user.name}\n      </h2>\n      <User\n        name={user.name}\n        description={user.email}\n        showFallback\n        avatarProps={{\n          size: 'lg',\n        }}\n      />\n      <div>\n        {items.length === 0 ? (\n          <p>You don't have any contacts yet.</p>\n        ) : (\n          <p>\n            You have {items.length}{' '}\n            {items.length === 1 ? 'contact' : 'contacts'}.\n          </p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Info;\n","import { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport Info from 'components/Info';\nimport { Button, useDisclosure } from '@nextui-org/react';\nimport { Plus } from 'lucide-react';\n\nconst Contacts = () => {\n  const [editingContact, setEditingContact] = useState(null);\n  const { isOpen, onOpen, onOpenChange } = useDisclosure();\n\n  const handleAddContact = () => {\n    setEditingContact(null);\n    onOpenChange(true);\n  };\n\n  const handleEditContact = contact => {\n    setEditingContact(contact);\n    onOpenChange(true);\n  };\n\n  return (\n    <div className=\"container mx-auto flex flex-col gap-4 py-4 md:py-8 md:pt-4 mb-24 sm:mb-0 px-6 md:px-0\">\n      <div className=\"flex flex-col gap-4\">\n        <Helmet>\n          <title>Phonebook - Contacts</title>\n        </Helmet>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 lg:w-[1024px] mx-auto lg:px-6\">\n          <div className=\"flex flex-col gap-4 items-start\">\n            <Info />\n\n            <Button\n              onClick={handleAddContact}\n              onOpen={onOpen}\n              endContent={<Plus className=\"w-5 h-5\" />}\n              className=\"bg-blue-600 text-white w-full\"\n            >\n              Add Contact\n            </Button>\n            <ContactForm\n              isOpen={isOpen}\n              onOpenChange={onOpenChange}\n              editingContact={editingContact}\n            />\n          </div>\n          <div className=\"flex flex-col gap-4\">\n            <Filter />\n            <ContactList\n              isOpen={isOpen}\n              onOpenChange={onOpenChange}\n              onEditContact={handleEditContact}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","number","_ref","isOpen","onOpenChange","editingContact","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","_useState5","_useState6","message","setMessage","useEffect","isInvalid","useMemo","match","_jsx","Modal","placement","hideCloseButton","children","ModalContent","_jsxs","onSubmit","event","existingContact","id","find","concat","updateContact","contactId","updatedData","addContact","className","ModalHeader","ModalBody","Input","type","label","value","onChange","e","target","variant","isRequired","size","errorMessage","color","ModalFooter","Button","onClick","placeholder","setFilter","labelPlacement","startContent","Search","onOpen","onEditContact","fetchContacts","sortedContacts","slice","sort","a","b","localeCompare","Table","selectionMode","defaultSelectedKeys","isHeaderSticky","classNames","base","TableHeader","TableColumn","TableBody","emptyContent","TableRow","TableCell","colSpan","Spinner","map","isIconOnly","PencilIcon","deleteContact","Trash2Icon","user","useAuth","_Fragment","User","description","email","showFallback","avatarProps","length","setEditingContact","_useDisclosure","useDisclosure","Helmet","Info","endContent","Plus","ContactForm","Filter","ContactList"],"sourceRoot":""}